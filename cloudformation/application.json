{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{
      "awsRegion":{
         "Description":"AWS Region",
         "Type":"String"
      },
      "vpcName":{
         "Description":"VPC Name",
         "Type":"String"
      },
      "internetGateway":{
         "Description":"Internet Gateway",
         "Type":"String",
         "Default":"InternetGateway"
      },
      "routeTable":{
         "Description":"Route Table",
         "Type":"String",
         "Default":"RouteTable"
      },
      "subnet1":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet1"
      },
      "subnet2":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet2"
      },
      "subnet3":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet3"
      },
      "vpccidrblock":{
         "Description":"VPC CIDR Block",
         "Type":"String"
      },
      "subnetcidrblock":{
         "Description":"Subnet CIDR Block",
         "Type":"String"
      },
      "ami":{
         "Description":"AMI id",
         "Type":"String"
      },
      "keyname":{
         "Description":"KeyName for the EC2",
         "Type":"String"
      },
      "ec2InstanceType":{
         "Description":"InstanceType for EC2",
         "Type":"String",
         "Default":"t2.micro"
      },
      "ec2Name":{
         "Description":"EC2 Name",
         "Type":"String",
         "Default":"myEC2Server"
      },
      "dbSecurityGroup":{
         "Description":"Database Security Group Name",
         "Type":"String",
         "Default":"csye6225-database-securitygroup"
      },
      "appSecurityGroup":{
         "Description":"Application Security Group Name",
         "Type":"String",
         "Default":"csye6225-application-securitygroup"
      },
      "dbName":{
         "Description":"RDS Database Name",
         "Type":"String",
         "Default":"csye6225"
      },
      "dbUserName":{
         "Description":"RDS Database UserName",
         "Type":"String",
         "Default":"dbuser"
      },
      "dbuserPassword":{
         "Description":"RDS Database User Password",
         "Type":"String",
         "Default":"dbuserPassword"
      },
      "dbIdentifier":{
         "Description":"RDS Identifier",
         "Type":"String",
         "Default":"csye6225-spring2020"
      },
      "applicationName":{
         "Default":"csye6225-webapp",
         "Description":"Cloud Application Name",
         "Type":"String"
      },
      "deploymentGroupName":{
         "Default":"csye6225-webapp-deployment",
         "Description":"Code Deploy Group Name",
         "Type":"String"
      },
      "webappBucketName":{
         "Default":"codedeploy.sarthakgoel.me",
         "Description":"webapp Bucket name",
         "Type":"String"
      },
      "hostedZoneId":{
         "Type":"String",
         "Default":"Z2NYNYWX36YOMO"
      },
      "domainName":{
         "Type":"String",
         "Default":"prod.sarthakgoel.me"
      },
      "VolumeSize":{
         "Type":"String",
         "Default":"20"
      },
      "queueName":{
         "Type":"String",
         "Default":"csye6225-message-queue",
         "Description":"AWS SQS Queue Name"
      },
      "topicName":{
         "Type":"String",
         "Default":"csye6225-message-topic",
         "Description":"AWS SNS Topic Name"
      },
      "emailAdd":{
         "Type":"String",
         "Default":"noreply@prod.sarthakgoel.me",
         "Description":"Email Address for Sending emails"
      }
   },
   "Resources":{
      "VPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Ref":"vpccidrblock"
            },
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"vpcName"
                  }
               }
            ]
         }
      },
      "PublicSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::GetAZs":{
                        "Ref":"awsRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet1"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "PublicSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::GetAZs":{
                        "Ref":"awsRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet2"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "PublicSubnet3":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  2,
                  {
                     "Fn::GetAZs":{
                        "Ref":"awsRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  2,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet3"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "InternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"internetGateway"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "VPCGatewayAttachment":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "InternetGatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "RouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"routeTable"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "RouteTableAssocSubnet1":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet1"
            },
            "RouteTableId":{
               "Ref":"RouteTable"
            }
         }
      },
      "RouteTableAssocSubnet2":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet2"
            },
            "RouteTableId":{
               "Ref":"RouteTable"
            }
         }
      },
      "RouteTableAssocSubnet3":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet3"
            },
            "RouteTableId":{
               "Ref":"RouteTable"
            }
         }
      },
      "RouteName":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"RouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "loadbalancerSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupName": "LoadBalancer-Security-Group",
            "GroupDescription": "Enable HTTP port 8080",
            "VpcId": {
               "Ref": "VPC"
            },
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": 80,
                  "ToPort": 80,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 443,
                  "ToPort": 443,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 8080,
                  "ToPort": 8080,
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": 22,
                  "ToPort": 22,
                  "CidrIp": "0.0.0.0/0"
               }
            ]
         }
      },
      "applicationSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security group for EC2",
            "GroupName":"csye6225-securitygroup",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":22,
                  "ToPort":22,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":8080,
                  "ToPort":8080,
                  "SourceSecurityGroupId": {
                     "Fn::GetAtt": [
                        "loadbalancerSecurityGroup",
                        "GroupId"
                     ]
                  }
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"appSecurityGroup"
                  }
               }
            ],
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "databaseSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"SecurityGroup for RDS",
            "GroupName":"csye6225-database-securitygroup",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"3306",
                  "ToPort":"3306",
                  "SourceSecurityGroupId":{
                     "Ref":"applicationSecurityGroup"
                  }
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"dbSecurityGroup"
                  }
               }
            ],
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "DBSubnetGroup":{
         "Type":"AWS::RDS::DBSubnetGroup",
         "Properties":{
            "DBSubnetGroupDescription":"DBSubnet Group for RDS instance",
            "SubnetIds":[
               {
                  "Ref":"PublicSubnet1"
               },
               {
                  "Ref":"PublicSubnet2"
               },
               {
                  "Ref":"PublicSubnet3"
               }
            ]
         }
      },
      "RDS":{
         "Type":"AWS::RDS::DBInstance",
         "Properties":{
            "Engine":"MySQL",
            "DBInstanceClass":"db.t3.micro",
            "MultiAZ":false,
            "DBInstanceIdentifier":{
               "Ref":"dbIdentifier"
            },
            "MasterUsername":{
               "Ref":"dbUserName"
            },
            "MasterUserPassword":{
               "Ref":"dbuserPassword"
            },
            "PubliclyAccessible":false,
            "DBName":{
               "Ref":"dbName"
            },
            "DBSubnetGroupName":{
               "Ref":"DBSubnetGroup"
            },
            "VPCSecurityGroups":[
               {
                  "Ref":"databaseSecurityGroup"
               }
            ],
            "AllocatedStorage":"10"
         }
      },
      "csyeS3Bucket":{
         "Type":"AWS::S3::Bucket",
         "Properties":{
            "AccessControl":"Private",
            "BucketEncryption":{
               "ServerSideEncryptionConfiguration":[
                  {
                     "ServerSideEncryptionByDefault":{
                        "SSEAlgorithm":"AES256"
                     }
                  }
               ]
            },
            "LifecycleConfiguration":{
               "Rules":[
                  {
                     "Id":"ShiftIn30Days",
                     "Status":"Enabled",
                     "Transition":{
                        "TransitionInDays":"30",
                        "StorageClass":"STANDARD_IA"
                     }
                  }
               ]
            }
         }
      },
      "DNSRecordSet":{
         "Type":"AWS::Route53::RecordSet",
         "Properties":{
            "Name":{
               "Ref":"domainName"
            },
            "HostedZoneId":{
               "Ref":"hostedZoneId"
            },
            "AliasTarget":{
               "HostedZoneId":{
                  "Fn::GetAtt":[
                     "LoadBalancer",
                     "CanonicalHostedZoneID"
                  ]
               },
               "DNSName":{
                  "Fn::GetAtt":[
                     "LoadBalancer",
                     "DNSName"
                  ]
               }
            },
            "Type":"A"
         }
      },
      "LoadBalancer": {
         "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties": {
            "Name": "csye6225-load-balancer",
            "IpAddressType":"ipv4",
            "Scheme": "internet-facing",
            "Type": "application",
            "SecurityGroups": [
               {
                  "Ref": "loadbalancerSecurityGroup"
               }
            ],
            "Subnets": [
               {
                  "Ref":"PublicSubnet1"
               },
               {
                  "Ref":"PublicSubnet2"
               },
               {
                  "Ref":"PublicSubnet3"
               }
            ]
         }
      },
      "Listener": {
         "Type": "AWS::ElasticLoadBalancingV2::Listener",
         "Properties": {
            "LoadBalancerArn": {
               "Ref": "LoadBalancer"
            },
            "DefaultActions": [
               {
                  "Type": "forward",
                  "TargetGroupArn": {
                     "Ref": "TargetGroup"
                  }
               }
            ],
            "Port": 80,
            "Protocol": "HTTP"
         }
      },
      "TargetGroup": {
         "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties": {
            "HealthCheckIntervalSeconds": 10,
            "HealthCheckPath": "/",
            "HealthCheckPort":"8080",
            "HealthCheckProtocol":"HTTP",
            "HealthCheckTimeoutSeconds": 6,
            "HealthyThresholdCount": 3,
            "Name":"TargetGroup",
            "Port":8080,
            "Protocol": "HTTP",
            "TargetType":"instance",
            "UnhealthyThresholdCount": 3,
            "TargetGroupAttributes": [
               {
                  "Key": "deregistration_delay.timeout_seconds",
                  "Value": "20"
               }
            ],
            "VpcId": {
               "Ref":"VPC"
            },
            "Matcher":{
               "HttpCode":"200"
            }
         },
         "DependsOn": [
            "LoadBalancer"
         ]
      },
      "asglaunchconfig": {
         "Type": "AWS::AutoScaling::LaunchConfiguration",
         "DependsOn": [
            "RDS"
         ],
         "Properties": {
            "ImageId": {
               "Ref":"ami"
            },
            "InstanceType": "t2.micro",
            "KeyName": {
               "Ref":"keyname"
            },
            "IamInstanceProfile": {
               "Ref":"EC2InstanceProfile"
            },
            "AssociatePublicIpAddress":true,
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sdm",
                  "Ebs":{
                     "VolumeType":"gp2",
                     "DeleteOnTermination":"true",
                     "VolumeSize":{
                        "Ref":"VolumeSize"
                     }
                  }
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash \n",
                        "set -e -x \n",
                        "sudo systemctl stop tomcat \n",
                        "sudo echo profile=dev >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export profile >> /etc/profile.d/envvar.sh \n",
                        "sudo echo DBCreationType=update >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export DBCreationType >> /etc/profile.d/envvar.sh \n",
                        {
                           "Fn::Sub":"sudo echo username=${dbUserName} >> /etc/profile.d/envvar.sh \n"
                        },
                        "sudo echo export username >> /etc/profile.d/envvar.sh \n",
                        {
                           "Fn::Sub":"sudo echo password=${dbuserPassword} >> /etc/profile.d/envvar.sh \n"
                        },
                        "sudo echo export password >> /etc/profile.d/envvar.sh \n",
                        {
                           "Fn::Sub":"sudo echo domain=${domainName} >> /etc/profile.d/envvar.sh \n"
                        },
                        "sudo echo export domain >> /etc/profile.d/envvar.sh \n",
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "echo sqsURL=https://sqs.",
                                 {
                                    "Fn::Sub":"${awsRegion}"
                                 },
                                 ".amazonaws.com/",
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "/",
                                 {
                                    "Ref":"queueName"
                                 },
                                 ">> /etc/profile.d/envvar.sh \n"
                              ]
                           ]
                        },
                        {
                           "Fn::Join": [
                              "",
                              [
                                 "echo snsARN=arn:aws:sns:",
                                 {
                                    "Fn::Sub":"${awsRegion}"
                                 },
                                 ":",
                                 {
                                    "Ref": "AWS::AccountId"
                                 },
                                 ":",
                                 {
                                    "Ref":"topicName"
                                 },
                                 ">> /etc/profile.d/envvar.sh \n"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "echo awsRDS=jdbc:mysql://",
                                 {
                                    "Fn::GetAtt":[
                                       "RDS",
                                       "Endpoint.Address"
                                    ]
                                 },
                                 {
                                    "Fn::Sub":":3306/${dbName} >> /etc/profile.d/envvar.sh \n"
                                 }
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "sudo echo bucketName=",
                                 {
                                    "Ref":"csyeS3Bucket"
                                 },
                                 ">> /etc/profile.d/envvar.sh \n"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "sudo echo rdsEndpoint=",
                                 {
                                    "Fn::GetAtt":[
                                       "RDS",
                                       "Endpoint.Address"
                                    ]
                                 },
                                 ">> /etc/profile.d/envvar.sh \n"
                              ]
                           ]
                        },
                        "sudo echo export sqsURL >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export snsARN >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export rdsEndpoint >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export awsRDS >> /etc/profile.d/envvar.sh \n",
                        "sudo echo export bucketName >> /etc/profile.d/envvar.sh \n",
                        "chmod 0755 /etc/profile.d/envvar.sh",
                        "source /etc/profile.d/envvar.sh",
                        "mkdir /home/ubuntu/webapp",
                        "chown ubuntu:ubuntu -R /home/ubuntu/webapp"
                     ]
                  ]
               }
            },
            "SecurityGroups": [
               {
                  "Ref": "applicationSecurityGroup"
               }
            ],
         }
      },
      "WebServerAutoScalingGroup": {
         "Type": "AWS::AutoScaling::AutoScalingGroup",
         "Properties": {
            "AutoScalingGroupName": "asglaunchconfig",
            "Cooldown": 300,
            "DesiredCapacity": 2,
            "LaunchConfigurationName": {
               "Ref": "asglaunchconfig"
            },
            "MaxSize": 5,
            "MinSize": 2,
            "TargetGroupARNs": [
               {
                  "Ref": "TargetGroup"
               }
            ],
            "Tags": [
               {
                  "Key": "Name",
                  "Value": {
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"ec2Name"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  },
                  "PropagateAtLaunch": "True"
               }
            ],
            "VPCZoneIdentifier": [
               {
                  "Ref":"PublicSubnet1"
               },
               {
                  "Ref":"PublicSubnet2"
               },
               {
                  "Ref":"PublicSubnet3"
               }
            ]
         }
      },
      "WebServerScaleUpPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "WebServerAutoScalingGroup"
            },
            "Cooldown": 300,
            "ScalingAdjustment": 1
         }
      },
      "WebServerScaleDownPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "WebServerAutoScalingGroup"
            },
            "Cooldown": 300,
            "ScalingAdjustment": -1
         }
      },
      "CPUAlarmHigh": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-up if CPU > 5% for 5 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": 300,
            "EvaluationPeriods": 2,
            "Threshold": 10,
            "AlarmActions": [
               {
                  "Ref": "WebServerScaleUpPolicy"
               }
            ],
            "Dimensions": [
               {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                     "Ref": "WebServerAutoScalingGroup"
                  }
               }
            ],
            "ComparisonOperator": "GreaterThanThreshold"
         }
      },
      "CPUAlarmLow": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-down if CPU < 3% for 5 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": 300,
            "EvaluationPeriods": 2,
            "Threshold": 5,
            "AlarmActions": [
               {
                  "Ref": "WebServerScaleDownPolicy"
               }
            ],
            "Dimensions": [
               {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                     "Ref": "WebServerAutoScalingGroup"
                  }
               }
            ],
            "ComparisonOperator": "LessThanThreshold"
         }
      },
      "EC2CodeDeployS3Policy":{
         "Type":"AWS::IAM::ManagedPolicy",
         "Properties":{
            "ManagedPolicyName":"CodeDeploy-EC2-S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "s3:Get*",
                        "s3:List*"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"webappBucketName"
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "FileAttachmentAccessS3Policy":{
         "Type":"AWS::IAM::ManagedPolicy",
         "Properties":{
            "ManagedPolicyName":"File-Attachment-Access-S3-Bucket",
            "Description":"Policy for uploading attachments to S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "s3:GetObject",
                        "s3:DeleteObject",
                        "s3:PutObject"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"csyeS3Bucket"
                                 }
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"csyeS3Bucket"
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "AMICircleCIPolicy":{
         "Properties":{
            "PolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "ec2:AttachVolume",
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:CopyImage",
                        "ec2:CreateImage",
                        "ec2:CreateKeypair",
                        "ec2:CreateSecurityGroup",
                        "ec2:CreateSnapshot",
                        "ec2:CreateTags",
                        "ec2:CreateVolume",
                        "ec2:DeleteKeyPair",
                        "ec2:DeleteSecurityGroup",
                        "ec2:DeleteSnapshot",
                        "ec2:DeleteVolume",
                        "ec2:DeregisterImage",
                        "ec2:DescribeImageAttribute",
                        "ec2:DescribeImages",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceStatus",
                        "ec2:DescribeRegions",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSnapshots",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeTags",
                        "ec2:DescribeVolumes",
                        "ec2:DetachVolume",
                        "ec2:GetPasswordData",
                        "ec2:ModifyImageAttribute",
                        "ec2:ModifyInstanceAttribute",
                        "ec2:ModifySnapshotAttribute",
                        "ec2:RegisterImage",
                        "ec2:RunInstances",
                        "ec2:StopInstances",
                        "ec2:TerminateInstances"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ],
               "Version":"2012-10-17"
            },
            "PolicyName":"circleci-ec2-ami",
            "Users":[
               "circleci"
            ]
         },
         "Type":"AWS::IAM::Policy"
      },
      "CodeDeployCircleCIPolicy":{
         "Properties":{
            "PolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "codedeploy:RegisterApplicationRevision",
                        "codedeploy:GetApplicationRevision"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "application:csye6225-webapp"
                              ]
                           ]
                        }
                     ]
                  },
                  {
                     "Action":[
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetDeployment"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        "*"
                     ]
                  },
                  {
                     "Action":[
                        "codedeploy:GetDeploymentConfig"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.OneAtATime"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.HalfAtATime"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.AllAtOnce"
                              ]
                           ]
                        }
                     ]
                  }
               ],
               "Version":"2012-10-17"
            },
            "PolicyName":"CirlceCI-Code-Deploy",
            "Users":[
               "circleci"
            ]
         },
         "Type":"AWS::IAM::Policy"
      },
      "CircleCIS3UploadPolicy":{
         "Properties":{
            "PolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "s3:Get*",
                        "s3:List*",
                        "s3:PutObject"
                     ],
                     "Effect":"Allow",
                     "Resource":{
                        "Fn::Join":[
                           "",
                           [
                              "arn:aws:s3:::",
                              {
                                 "Ref":"webappBucketName"
                              },
                              "/*"
                           ]
                        ]
                     }
                  }
               ],
               "Version":"2012-10-17"
            },
            "PolicyName":"CirlceCI-Upload-To-S3",
            "Users":[
               "circleci"
            ]
         },
         "Type":"AWS::IAM::Policy"
      },
      "EC2CodeDeployServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "RoleName":"EC2CodeDeployServiceRole",
            "ManagedPolicyArns":[
               {
                  "Ref":"EC2CodeDeployS3Policy"
               },
               {
                  "Ref":"FileAttachmentAccessS3Policy"
               },
               "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
               "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
               "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
            ],
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "sts:AssumeRole"
                     ],
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     }
                  }
               ],
            }
         }
      },
      "CodeDeployServiceRole":{
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "sts:AssumeRole"
                     ],
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "codedeploy.amazonaws.com"
                        ]
                     }
                  }
               ],
               "Version":"2012-10-17"
            },
            "ManagedPolicyArns":[
               "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
            "RoleName":"CodeDeployServiceRole"
         },
         "Type":"AWS::IAM::Role"
      },
      "EC2InstanceProfile": {
         "Properties": {
            "Path": "/",
            "Roles": [
               {
                  "Ref": "EC2CodeDeployServiceRole"
               }
            ]
         },
         "Type": "AWS::IAM::InstanceProfile"
      },
      "WebApplication": {
         "Properties": {
            "ApplicationName": {
               "Ref": "applicationName"
            },
            "ComputePlatform": "Server"
         },
         "Type": "AWS::CodeDeploy::Application"
      },
      "WebApplicationDeploymentGroup": {
         "DependsOn": "CodeDeployServiceRole",
         "Properties": {
            "ApplicationName": {
               "Ref": "WebApplication"
            },
            "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
            "AutoScalingGroups": [
               {
                  "Ref": "WebServerAutoScalingGroup"
               }
            ],
            "LoadBalancerInfo":{
               "TargetGroupInfoList":[
                  {
                     "Name":{
                        "Fn::GetAtt":[
                           "TargetGroup",
                           "TargetGroupName"
                        ]
                     }
                  }
               ]
            },
            "DeploymentGroupName": {
               "Ref": "deploymentGroupName"
            },
            "DeploymentStyle": {
               "DeploymentOption": "WITH_TRAFFIC_CONTROL",
               "DeploymentType": "IN_PLACE"
            },
            "AutoRollbackConfiguration": {
               "Enabled": "true",
               "Events": [
                  "DEPLOYMENT_FAILURE"
               ]
            },
            "Ec2TagFilters": [
               {
                  "Key": "Name",
                  "Type": "KEY_AND_VALUE",
                  "Value": {
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"ec2Name"
                           },
                           {
                              "Ref":"vpcName"
                           }
                        ]
                     ]
                  }
               }
            ],
            "AutoRollbackConfiguration":{
               "Enabled":"true",
               "Events":[
                  "DEPLOYMENT_FAILURE"
               ]
            },
            "ServiceRoleArn": {
               "Fn::GetAtt": [
                  "CodeDeployServiceRole",
                  "Arn"
               ]
            }
         },
         "Type": "AWS::CodeDeploy::DeploymentGroup"
      },
      "SQSQueue":{
         "Type" : "AWS::SQS::Queue",
         "Properties" : {
            "QueueName" : {
               "Ref":"queueName"
            },
            "Tags" : [
               {
                  "Key":"Name",
                  "Value":"csye6225-message-queue"
               }
            ]
         }
      },
      "DynamoDatabase": {
         "Type": "AWS::DynamoDB::Table",
         "Properties": {
            "TableName": "csye6225",
            "AttributeDefinitions": [
               {
                  "AttributeName": "id",
                  "AttributeType": "S"
               }
            ],
            "KeySchema": [
               {
                  "AttributeName": "id",
                  "KeyType": "HASH"
               }
            ],
            "ProvisionedThroughput": {
               "ReadCapacityUnits": 10,
               "WriteCapacityUnits": 5
            },
            "TimeToLiveSpecification": {
               "AttributeName": "TTL",
               "Enabled": "TRUE"
            }
         }
      },
      "SNSService" : {
         "Type": "AWS::SNS::Topic",
         "Properties": {
            "DisplayName" : {
               "Ref":"topicName"
            },
            "TopicName" : {
               "Ref":"topicName"
            },
            "Subscription": [
               {
                  "Endpoint": {
                     "Fn::GetAtt": [
                        "Lambdafunction",
                        "Arn"
                     ]
                  },
                  "Protocol": "lambda"
               }
            ]
         }
      },
      "LambdaPermission": {
         "Type": "AWS::Lambda::Permission",
         "Properties": {
            "Action": "lambda:*",
            "FunctionName": {
               "Fn::GetAtt": [
                  "Lambdafunction",
                  "Arn"
               ]
            },
            "Principal": "sns.amazonaws.com",
            "SourceArn": {
               "Ref": "SNSService"
            }
         }
      },
      "Lambdafunction" : {
         "Type" : "AWS::Lambda::Function",
         "Properties" : {
            "FunctionName": "EmailOnSNS",
            "MemorySize": 512,
            "Environment": {
               "Variables": {
                  "emailAddress": {
                     "Ref": "emailAdd"
                  }
               }
            },
            "Code": {
               "S3Bucket": {
                  "Ref" : "webappBucketName"
               },
               "S3Key": "Lambda-1.0-SNAPSHOT.jar"
            },
            "Role": {
               "Fn::GetAtt": [
                  "LambdaRole",
                  "Arn"
               ]
            },
            "Timeout": 90,
            "Handler": "SendEmail::handleRequest",
            "Runtime": "java8"
         }
      },
      "LambdaRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "RoleName": "lambdaRole",
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action": [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "ManagedPolicyArns": [
               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
               "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
               "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
               "arn:aws:iam::aws:policy/AmazonSESFullAccess",
               "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            ]
         }
      }
   },
   "Outputs":{
      "VPC":{
         "Description":"VPC",
         "Value":{
            "Ref":"VPC"
         }
      }
   }
}